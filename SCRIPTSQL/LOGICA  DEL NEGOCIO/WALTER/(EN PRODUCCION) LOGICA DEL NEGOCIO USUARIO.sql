/*antes de tener una cuenta, debe existir un USUARIO
por lo que procedemos a crearlo por medio de plsql*/
/*1.- creamos una secuencia para llevar el control de los correlativos EN LAS DISTINTAS TABLAS QUE TENGAN
QUE VER CON USUARIO, EN ESTA CASO ELLA MISMA Y SU BITÁCORA*/

/*SECUENCIA PARA LE ID DE USUARIOS*/
CREATE SEQUENCE SEQ_NUMERO_USUARIO
START WITH 1
INCREMENT BY 1;
COMMIT;
/
/*SECUENCIA PARA EL ID DE LA BITACORA*/
CREATE SEQUENCE SEQ_BITACORA_USUARIO
START WITH 1
INCREMENT BY 1; 
COMMIT;
/
/*2.- debemos crear el directorio donde vamos a almacenar las firmas de los USUARIOs*/
/*2.1 definimos el nombre del directorio y la ruta*/
CREATE OR REPLACE DIRECTORY DIR_USUARIO AS 'C:\USUARIO_FOTOGRAFIA';
/*2.2 - otorgamos los permisos a los usuarios debemos crear un rol y los permisos que tendrá a ciertas tablas*/
GRANT READ, WRITE ON DIRECTORY DIR_USUARIO TO HR WITH GRANT OPTION; 
COMMIT;

/*TRIGGER PARA CAMPO AUTOINCREMENTABLE*/
CREATE OR REPLACE TRIGGER BI_USUARIO 
BEFORE INSERT ON USUARIO
FOR EACH ROW
BEGIN
SELECT SEQ_BITACORA_USUARIO.NEXTVAL INTO :NEW.ID_USUARIO FROM DUAL;
END BI_USUARIO;
COMMIT;
/

/*3.- VAMOS A CREAR UN PROCEDIMIENTO ALMACENADO PARA LA INSERCIÓN DE DATOS EN LA TABLA USUARIO,
VAMOS A MANDAR COMO PARÁMETRO UNA VARIABLE TIPO %ROWTYPE PARA HACER MAS FÁCIL EL PROCESO,
*/
CREATE OR REPLACE PROCEDURE PROC_CREAR_USUARIO(DATOS_USUARIO USUARIO%ROWTYPE)
    IS
    GENERO TIPO_GENERO.TIPO_GENERO%TYPE;
    NO_EXIST_TIPO EXCEPTION;
    NO_EXIST_USR EXCEPTION;
    EXISTE_USUARIO NUMBER;
    /*EL USUARIO DEBE DE ESTAR ACTIVO PARA INSERTAR SI SEGÚN SU ROL TIENE ESTE PRIVILEGIO*/
    USUARIO_ACT ESTATUS_USUARIO.NOMBRE%TYPE;
    BEGIN
        /*reviso en la base de datos, si el usuario ya está creado en la misma, esto con el fin de aprendizaje
        se requiere que para crear un usuario en nuestro sistema, debe estar previamente creado en la base de datos
        a nivel del dba*/
         SELECT COUNT(*) INTO EXISTE_USUARIO FROM ALL_USERS WHERE USERNAME=DATOS_USUARIO.NOMBRE_USUARIO;

        /*Evaluamos SI EL TIPO DE GENERO SELECCIONADO EXISTE DENTRO DE LOS YA
        ESTABLECIDOS EN LA BASE DE DATOS*/
        SELECT COUNT(TIPO_GENERO) INTO GENERO FROM TIPO_GENERO WHERE TIPO_GENERO=DATOS_USUARIO.TIPO_GENERO; 
        /**/
        IF(GENERO>0 AND EXISTE_USUARIO>0) THEN
            /*si todo transcurre con normalidad, insertamos datos EL ESTATUS 1 QUIERE DECIR QUE POR DEFECTO VAMOS A ACTIVAR AL USUARIO*/
            INSERT INTO USUARIO(NOMBRE_USUARIO,NOMBRES,APELLIDOS,DPI,DIRECCION,CORREO_ELECTRONICO,TELEFONO,CELULAR,FECHA_NACIMIENTO,
            FECHA_CREACION, FOTOGRAFIA, CONTRASENA,ID_AGENCIA,ID_MUNICIPIO,TIPO_USUARIO,TIPO_GENERO,ESTATUS_USUARIO)

            VALUES(DATOS_USUARIO.NOMBRE_USUARIO, DATOS_USUARIO.NOMBRES, DATOS_USUARIO.APELLIDOS, DATOS_USUARIO.DPI, DATOS_USUARIO.DIRECCION,
            DATOS_USUARIO.CORREO_ELECTRONICO, DATOS_USUARIO.TELEFONO, DATOS_USUARIO.CELULAR, DATOS_USUARIO.FECHA_NACIMIENTO, SYSDATE,
            DATOS_USUARIO.FOTOGRAFIA, DATOS_USUARIO.CONTRASENA, DATOS_USUARIO.ID_AGENCIA, DATOS_USUARIO.ID_MUNICIPIO, 
            DATOS_USUARIO.TIPO_USUARIO, DATOS_USUARIO.TIPO_GENERO,1);
        /*SINO EXISTE EL TIPO LEVANTAMOS UNA EXCEPCION PROPIA*/
        ELSE
            IF(GENERO=0) THEN
                RAISE NO_EXIST_TIPO;
            ELSIF(EXISTE_USUARIO<=0) THEN
                RAISE NO_EXIST_USR;
            END IF;    
        END IF;
        /*Al salir todo bien, confirmamos la transacción*/
        COMMIT;
        EXCEPTION
            WHEN NO_EXIST_USR THEN
                 DBMS_OUTPUT.PUT_LINE('EL USUARIO NO EXISTE EN LA BASE DE DATOS O NO TIENE PERMISOS');
            WHEN NO_EXIST_TIPO THEN
                 DBMS_OUTPUT.PUT_LINE('SELECCCIONE UN GENERO CORRECTO');
            /*SI POR X O Y MOTIVO SE PLANEA INSERTAR UN USUARIO CON UN ID YA EXISTENTE*/
            WHEN DUP_VAL_ON_INDEX THEN
                 DBMS_OUTPUT.PUT_LINE('ESTÁ INTENTANDO INSERTAR UN NUMERO DE USUARIO YA EXISTENTE, REVISE POR FAVOR, O COMUNÍQUESE CON EL DBA');
            /*Como para la inserción únicamente vamos a evaluar si el tipo de género existe,
            sino lo ecuentra devolverá esta excepción*/
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRÓ DATO RELACIONADO A');
            /*Se agotò el tiempo de espera*/
            WHEN TIMEOUT_ON_RESOURCE THEN
                DBMS_OUTPUT.PUT_LINE('SE AGOTÓ EL TIEMPO DE ESPERA');
            /*Se intentó hacer una operación aritmética, pero no se logro realizar*/
            WHEN VALUE_ERROR THEN
                DBMS_OUTPUT.PUT_LINE('ERROR DE ÍNDOLE ARITMÉTICO');
            /*En un parámetro que es de tipo numérico se ingresa un caracter distinto a un número*/
            WHEN INVALID_NUMBER THEN
                DBMS_OUTPUT.PUT_LINE('FALLÓ LA CONVERSIÓN DE UN STRING O CARACTER A NÚMERO');
            /*No se permitió el acceso a la base de datos*/
            WHEN LOGIN_DENIED THEN
                DBMS_OUTPUT.PUT_LINE('ERROR AL MOMENTO DE REALIZAR EL LOGIN EN LA BASE DE DATOS');
            /*Si se presenta otro tipo de error*/
            WHEN OTHERS THEN 
                DBMS_OUTPUT.PUT_LINE('OCURRIÓ UN ERROR    '||SQLCODE||'    Mensaje:    '||SQLERRM);
        /*En dado caso la transacción presenta algún problema durante su uso, la revertimos*/
        ROLLBACK;
/*FIN DEL PROCEDIMIENTO ALMACENADO*/
END PROC_CREAR_USUARIO;
/

/* 4.- CAMPO AUTOINCREMENTABLE DE LA BITACORA DEL USUARIO*/
CREATE OR REPLACE TRIGGER BI_BITACORA_USUARIO 
BEFORE INSERT ON BITACORA_USUARIO
FOR EACH ROW
BEGIN
SELECT SEQ_BITACORA_USUARIO.NEXTVAL INTO :NEW.ID_OPERACION FROM DUAL;
END BI_BITACORA_USUARIO;
/

/* 5.- después de insertar datos en la tabla USUARIO debemos registrarlos en bitacora USUARIO (la inserción)*/
CREATE OR REPLACE TRIGGER AIUD_TBL_USUARIO
AFTER INSERT OR UPDATE OR DELETE  ON USUARIO
FOR EACH ROW
DECLARE
BEGIN
    CASE WHEN INSERTING THEN
            INSERT INTO BITACORA_USUARIO (ID_USUARIO,VALOR_ANTERIOR,VALOR_NUEVO,FECHA_OPERACION,DETALLES,CAMPO_AFECTADO,TIPO_OPERACION) 
            VALUES(:NEW.ID_USUARIO,NULL,NULL,SYSDATE,'',NULL,2);

        WHEN UPDATING ('NOMBRE_USUARIO') THEN
            INSERT INTO BITACORA_USUARIO (ID_USUARIO,VALOR_ANTERIOR,VALOR_NUEVO,FECHA_OPERACION,DETALLES,CAMPO_AFECTADO,TIPO_OPERACION) 
            VALUES(:OLD.ID_USUARIO,:OLD.NOMBRE_USUARIO,:NEW.NOMBRE_USUARIO,SYSDATE,'',2,1);  
        WHEN UPDATING ('NOMBRES') THEN
            INSERT INTO BITACORA_USUARIO (ID_USUARIO,VALOR_ANTERIOR,VALOR_NUEVO,FECHA_OPERACION,DETALLES,CAMPO_AFECTADO,TIPO_OPERACION) 
            VALUES(:OLD.ID_USUARIO,:OLD.NOMBRES,:NEW.NOMBRES,SYSDATE,'',3,1);
        WHEN UPDATING ('APELLIDOS') THEN
            INSERT INTO BITACORA_USUARIO (ID_USUARIO,VALOR_ANTERIOR,VALOR_NUEVO,FECHA_OPERACION,DETALLES,CAMPO_AFECTADO,TIPO_OPERACION) 
            VALUES(:OLD.ID_USUARIO,:OLD.APELLIDOS,:NEW.APELLIDOS,SYSDATE,'',4,1);
        WHEN UPDATING ('DPI') THEN
            INSERT INTO BITACORA_USUARIO (ID_USUARIO,VALOR_ANTERIOR,VALOR_NUEVO,FECHA_OPERACION,DETALLES,CAMPO_AFECTADO,TIPO_OPERACION) 
            VALUES(:OLD.ID_USUARIO,:OLD.DPI,:NEW.DPI,SYSDATE,'',5,1);
         WHEN UPDATING ('DIRECCION') THEN
            INSERT INTO BITACORA_USUARIO (ID_USUARIO,VALOR_ANTERIOR,VALOR_NUEVO,FECHA_OPERACION,DETALLES,CAMPO_AFECTADO,TIPO_OPERACION) 
            VALUES(:OLD.ID_USUARIO,:OLD.DIRECCION,:NEW.DIRECCION,SYSDATE,'',6,1); 
         WHEN UPDATING ('CORREO_ELECTRONICO') THEN
            INSERT INTO BITACORA_USUARIO (ID_USUARIO,VALOR_ANTERIOR,VALOR_NUEVO,FECHA_OPERACION,DETALLES,CAMPO_AFECTADO,TIPO_OPERACION) 
            VALUES(:OLD.ID_USUARIO,:OLD.CORREO_ELECTRONICO,:NEW.CORREO_ELECTRONICO,SYSDATE,'',7,1); 
         WHEN UPDATING ('TELEFONO') THEN
            INSERT INTO BITACORA_USUARIO (ID_USUARIO,VALOR_ANTERIOR,VALOR_NUEVO,FECHA_OPERACION,DETALLES,CAMPO_AFECTADO,TIPO_OPERACION) 
            VALUES(:OLD.ID_USUARIO,:OLD.TELEFONO,:NEW.TELEFONO,SYSDATE,'',8,1);   
         WHEN UPDATING ('CELULAR') THEN
            INSERT INTO BITACORA_USUARIO (ID_USUARIO,VALOR_ANTERIOR,VALOR_NUEVO,FECHA_OPERACION,DETALLES,CAMPO_AFECTADO,TIPO_OPERACION) 
            VALUES(:OLD.ID_USUARIO,:OLD.CELULAR,:NEW.CELULAR,SYSDATE,'',9,1); 
         WHEN UPDATING ('FECHA_NACIMIENTO') THEN
            INSERT INTO BITACORA_USUARIO (ID_USUARIO,VALOR_ANTERIOR,VALOR_NUEVO,FECHA_OPERACION,DETALLES,CAMPO_AFECTADO,TIPO_OPERACION) 
            VALUES(:OLD.ID_USUARIO,TO_CHAR(:OLD.FECHA_NACIMIENTO),TO_CHAR(:NEW.FECHA_NACIMIENTO),SYSDATE,'',10,1);
         WHEN UPDATING ('FOTOGRAFIA') THEN
            INSERT INTO BITACORA_USUARIO (ID_USUARIO,FECHA_OPERACION,DETALLES,CAMPO_AFECTADO,TIPO_OPERACION,IMG_ANTIGUA,IMG_NUEVA) 
            VALUES(:OLD.ID_USUARIO,SYSDATE,'',12,1,:OLD.FOTOGRAFIA, :NEW.FOTOGRAFIA);
         WHEN UPDATING ('CONTRASENA') THEN
            INSERT INTO BITACORA_USUARIO (ID_USUARIO,VALOR_ANTERIOR,VALOR_NUEVO,FECHA_OPERACION,DETALLES,CAMPO_AFECTADO,TIPO_OPERACION) 
            VALUES(:OLD.ID_USUARIO,:OLD.CONTRASENA,:NEW.CONTRASENA,SYSDATE,'',14,1); 
         WHEN UPDATING ('ID_AGENCIA') THEN
            INSERT INTO BITACORA_USUARIO (ID_USUARIO,VALOR_ANTERIOR,VALOR_NUEVO,FECHA_OPERACION,DETALLES,CAMPO_AFECTADO,TIPO_OPERACION) 
            VALUES(:OLD.ID_USUARIO,:OLD.ID_AGENCIA,:NEW.ID_AGENCIA,SYSDATE,'',15,1); 
        WHEN UPDATING ('ID_MUNICIPIO') THEN
            INSERT INTO BITACORA_USUARIO (ID_USUARIO,VALOR_ANTERIOR,VALOR_NUEVO,FECHA_OPERACION,DETALLES,CAMPO_AFECTADO,TIPO_OPERACION) 
            VALUES(:OLD.ID_USUARIO,:OLD.ID_MUNICIPIO,:NEW.ID_MUNICIPIO,SYSDATE,'',16,1);
        WHEN UPDATING ('TIPO_USUARIO') THEN
            INSERT INTO BITACORA_USUARIO (ID_USUARIO,VALOR_ANTERIOR,VALOR_NUEVO,FECHA_OPERACION,DETALLES,CAMPO_AFECTADO,TIPO_OPERACION) 
            VALUES(:OLD.ID_USUARIO,:OLD.TIPO_USUARIO,:NEW.TIPO_USUARIO,SYSDATE,'',17,1);
        WHEN UPDATING ('TIPO_GENERO') THEN
            INSERT INTO BITACORA_USUARIO (ID_USUARIO,VALOR_ANTERIOR,VALOR_NUEVO,FECHA_OPERACION,DETALLES,CAMPO_AFECTADO,TIPO_OPERACION) 
            VALUES(:OLD.ID_USUARIO,:OLD.TIPO_GENERO,:NEW.TIPO_GENERO,SYSDATE,'',18,1);
        WHEN UPDATING ('ESTATUS_USUARIO') THEN
            INSERT INTO BITACORA_USUARIO (ID_USUARIO,VALOR_ANTERIOR,VALOR_NUEVO,FECHA_OPERACION,DETALLES,CAMPO_AFECTADO,TIPO_OPERACION) 
            VALUES(:OLD.ID_USUARIO,:OLD.ESTATUS_USUARIO,:NEW.ESTATUS_USUARIO,SYSDATE,'',19,1);    
    END CASE;         
    EXCEPTION
    /*si por algún motivo falla alguna conversión de un número*/
    WHEN INVALID_NUMBER THEN
        DBMS_OUTPUT.PUT_LINE(SQLCODE||'  FALLÓ LA CONVERSIÓN DE:    '||SQLERRM);
    /*si el usuario quiere insertar un valor con un id de la tabla  ya  creado*/
    WHEN DUP_VAL_ON_INDEX THEN
        DBMS_OUTPUT.PUT_LINE('ESTÁ INTENTANDO REGISTRAR CON UN ID YA EXISTENTE, COMUNIQUESE CON EL DBA');
    /*si el  usuario no está registrado dentro de la base de datos*/
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('USTED NO TIENE PRIVILEGIOS O PERMISOS PARA CREAR ESTA OPERACION, CONTACTE CON EL DBA');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLCODE||'    ERROR:     '||'MENSAJE    '||SQLERRM);
END;
/
COMMIT;
/
/*6.- FORMA DE MANDAR LOS DATOS PARA EL STORED PROCEDURE*/
/*BLOQUE ANÒNIMO*/

DECLARE
USUARIO_N USUARIO%ROWTYPE;
BEGIN

    USUARIO_N.NOMBRE_USUARIO:'HR';
    USUARIO_N.NOMBRES:='Thaner Berenice';
    USUARIO_N.APELLIDOS:='Roman';
    USUARIO_N.DPI:='2433453126483';
    USUARIO_N.DIRECCION:='zona X';
    USUARIO_N.CORREO_ELECTRONICO:='Troman@hotmail.es';
    USUARIO_N.TELEFONO:='14537154';
    USUARIO_N.CELULAR:='';
    USUARIO_N.FECHA_NACIMIENTO:=TO_DATE('02/11/1995','dd/mm/yyyy');
    USUARIO_N.FOTOGRAFIA:=NULL;
    USUARIO_N.CONTRASENA:='AJSDLFK'
    ID_AGENCIA=1;
    ID_MUNICIPIO=1;
    TIPO_USUARIO=NULL;
    TIPO_GENERO=2;
END;
/*PROBAMOS EL PROCEDIMIENTO ALMACENADO*/
PROC_CREAR_USUARIO(USUARIO_N);
END;
/